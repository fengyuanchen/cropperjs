import{_ as i,c as e,o as t,ag as a}from"./chunks/framework.CAD6b6pp.js";const c=JSON.parse('{"title":"CropperElement","description":"","frontmatter":{},"headers":[],"relativePath":"api/cropper-element.md","filePath":"api/cropper-element.md","lastUpdated":1740835481000}'),l={name:"api/cropper-element.md"};function n(p,s,h,o,r,d){return t(),e("div",null,s[0]||(s[0]=[a(`<h1 id="cropperelement" tabindex="-1">CropperElement <a class="header-anchor" href="#cropperelement" aria-label="Permalink to &quot;CropperElement&quot;">​</a></h1><p>The <code>CropperElement</code> interface represents any Cropper element, extends the <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement" target="_blank" rel="noreferrer">HTMLElement</a> interface.</p><h2 id="specifications" tabindex="-1">Specifications <a class="header-anchor" href="#specifications" aria-label="Permalink to &quot;Specifications&quot;">​</a></h2><ul><li>The name of public properties should start with an alphabetic character.</li><li>The name of private properties should start with <code>$</code>.</li><li>The name of public/private custom methods should start with <code>$</code>.</li><li>The name of private custom listeners should start with <code>$on</code>.</li></ul><h2 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { CropperElement } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;cropperjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Or</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// import CropperElement from &#39;@cropper/element&#39;;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyCropperElement</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CropperElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  myStringProperty</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  myNumberProperty</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NaN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  myBooleanProperty</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> get</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> observedAttributes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.observedAttributes.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">concat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &#39;my-boolean-property&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &#39;my-number-property&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &#39;my-string-property&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ]);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MyCropperElement.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$define</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">my-cropper-element</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> my-string-property</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;foo&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> my-number-property</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> my-boolean-property</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">my-cropper-element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h2 id="properties" tabindex="-1">Properties <a class="header-anchor" href="#properties" aria-label="Permalink to &quot;Properties&quot;">​</a></h2><p>Inherits properties from its parent, <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement" target="_blank" rel="noreferrer"><code>HTMLElement</code></a>, and implements the following properties:</p><table tabindex="0"><thead><tr><th>Name</th><th>Type</th><th>Default</th><th>Options</th><th>Description</th></tr></thead><tbody><tr><td>shadowRootMode</td><td><code>string</code></td><td><code>&quot;open&quot;</code></td><td><code>&quot;closed&quot; | &quot;open&quot;</code></td><td>Indicates the encapsulation mode for the shadow DOM tree.</td></tr><tr><td>slottable</td><td><code>boolean</code></td><td><code>true</code></td><td>-</td><td>Indicates whether this element contains a <code>&lt;slot&gt;</code> element.</td></tr><tr><td>themeColor</td><td><code>string</code></td><td>-</td><td>-</td><td>Indicates the theme color of this element and its children.</td></tr></tbody></table><h2 id="methods" tabindex="-1">Methods <a class="header-anchor" href="#methods" aria-label="Permalink to &quot;Methods&quot;">​</a></h2><h3 id="getshadowroot" tabindex="-1">$getShadowRoot <a class="header-anchor" href="#getshadowroot" aria-label="Permalink to &quot;$getShadowRoot&quot;">​</a></h3><ul><li><strong>Syntax</strong>: <code>$getShadowRoot()</code></li><li><strong>Returns</strong>: <ul><li>Type: <code>ShadowRoot</code></li><li>The shadow root.</li></ul></li></ul><p>Outputs the shadow root of the element, even if its mode is <code>&quot;closed&quot;</code>.</p><h3 id="addstyles" tabindex="-1">$addStyles <a class="header-anchor" href="#addstyles" aria-label="Permalink to &quot;$addStyles&quot;">​</a></h3><ul><li><p><strong>Syntax</strong>: <code>$addStyles(styles)</code></p></li><li><p><strong>Arguments</strong>:</p><ul><li><code>styles</code>: <ul><li>Type: <code>string</code></li><li>The styles to add.</li></ul></li></ul></li><li><p><strong>Returns</strong>:</p><ul><li>Type: <code>CSSStyleSheet | HTMLStyleElement</code></li><li>The generated style sheet.</li></ul></li><li><p><strong>Example</strong>:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> canvas</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CropperCanvas</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">canvas.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$addStyles</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  :host {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    border: 1px solid #39f;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  }</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div></li></ul><p>Adds styles to the shadow root.</p><h3 id="emit" tabindex="-1">$emit <a class="header-anchor" href="#emit" aria-label="Permalink to &quot;$emit&quot;">​</a></h3><ul><li><p><strong>Syntax</strong>:</p><ul><li><code>$emit(type)</code></li><li><code>$emit(type, detail)</code></li><li><code>$emit(type, detail, options)</code></li></ul></li><li><p><strong>Arguments</strong>:</p><ul><li><code>type</code>: <ul><li>Type: <code>string</code></li><li>The name of the event.</li></ul></li><li><code>detail</code>: <ul><li>Type: <code>*</code></li><li>Default: <code>undefined</code></li><li>The data passed when initializing the event.</li></ul></li><li><code>options</code>: <ul><li>Type: <code>CustomEventInit</code></li><li>Default: <code>{ bubbles: true, cancelable: true, composed: true }</code></li><li>The other event options.</li></ul></li></ul></li><li><p><strong>Returns</strong>:</p><ul><li>Type: <code>boolean</code></li><li>The result value.</li></ul></li><li><p><strong>Example</strong>:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> selection</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CropperSelection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">selection.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$emit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;change&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  x: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  y: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  width: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">160</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  height: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">90</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div></li></ul><p>Dispatches an event at the current element.</p><h3 id="nexttick" tabindex="-1">$nextTick <a class="header-anchor" href="#nexttick" aria-label="Permalink to &quot;$nextTick&quot;">​</a></h3><ul><li><strong>Syntax</strong>: <ul><li><code>$nextTick()</code></li><li><code>$nextTick(callback)</code></li></ul></li><li><strong>Arguments</strong>: <ul><li><code>callback</code>: <ul><li>Type: <code>Function</code></li><li>The callback to execute after the next DOM update cycle.</li></ul></li></ul></li><li><strong>Returns</strong>: <ul><li>Type: <code>Promise</code></li><li>A promise that resolves to nothing.</li></ul></li></ul><p>Defers the callback to be executed after the next DOM update cycle.</p><h2 id="static-properties" tabindex="-1">Static Properties <a class="header-anchor" href="#static-properties" aria-label="Permalink to &quot;Static Properties&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Name</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>$name</td><td><code>string</code></td><td>The name of the custom element.</td></tr><tr><td>$version</td><td><code>string</code></td><td>The version of the package.</td></tr></tbody></table><h2 id="static-methods" tabindex="-1">Static methods <a class="header-anchor" href="#static-methods" aria-label="Permalink to &quot;Static methods&quot;">​</a></h2><h3 id="define" tabindex="-1">$define <a class="header-anchor" href="#define" aria-label="Permalink to &quot;$define&quot;">​</a></h3><p>Defines the constructor as a new custom element. It is just a shortcut to call <a href="https://developer.mozilla.org/en-US/docs/Web/API/CustomElementRegistry/define" target="_blank" rel="noreferrer"><code>CustomElementRegistry.define()</code></a>.</p><ul><li><p><strong>Syntax</strong>:</p><ul><li><code>$define()</code></li><li><code>$define(name)</code></li><li><code>$define(options)</code></li><li><code>$define(name, options)</code></li></ul></li><li><p><strong>Alternatives</strong>:</p><ul><li><code>customElements.define(name, constructor)</code></li><li><code>customElements.define(name, constructor, options)</code></li></ul></li><li><p><strong>Arguments</strong>:</p><ul><li><code>name</code>: <ul><li>Type: <code>string</code></li><li>The element name. Defaults to the <code>$name</code> static property of the constructor.</li></ul></li><li><code>options</code>: <ul><li>Type: <code>Object</code></li><li>The element definition options.</li></ul></li></ul></li><li><p><strong>Example</strong>:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Define as a autonomous custom element: \`&lt;my-cropper-element&gt;&lt;/my-cropper-element&gt;\`.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CropperElement.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$define</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;my-cropper-element&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div></li></ul>`,29)]))}const E=i(l,[["render",n]]);export{c as __pageData,E as default};
